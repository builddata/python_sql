常用的mysql语句操作大全
发布日期：2016-09-19文章来源：转载
create database <数据库名>；
查看当前使用的数据库： select database();
建表：
create table MyClass(id int(4) not null primary key auto_increment,
name char(20) not null,
sex int(4) not null default '0',
degree double(16,2));

插入数据：insert into <表名> [( <字段名1>[,..<字段名n > ])] values ( 值1 )[, ( 值n )]

查看表 MyClass 中前2行数据：select * from MyClass order by id limit 0,2;

删除：delete from 表名 where 表达式

清空表：delete from MYTABLE;

修改：update 表名 set 字段=新值,… where 条件

在表中增加字段：alter table 表名 add字段 类型 其他;
alter table dbname add column userid int(11) not null primary key auto_increment;

更改表名：rename table 原表名 to 新表名;

mysql数据库的授权：grant select,insert,delete,create,drop
　　 on *.* (或test.*/user.*/. 数据库)
　　 to 用户名@localhost
　　 identified by '密码'；
一、用户创建、权限、删除

1、连接MySql操作

连接： mysql -h 主机地址 -u 用户名 －p 用户密码 （注:u与root可以不用加空格，其它也一样）

断开： exit （回车）

打开cmd,输入
mysql -hlocalhost -uroot -p
mysql -h 127.0.0.1 -u root -p 然后输入密码。就可以连接到本地的MySql数据库了。
status
show databases;
show tables;
导入文件source d:/work/文件名.sql;   （此处为正斜杠"/"）
修改本地加载功能： set global local_infile = 1;
show processlist；可以看到TableA上有正在进行的操作（包括读）
kill id（数字）；结束process


显示当前用户：select user();

显示当前时间：select now();

显示当前版本：select version();

查看当前使用数据库：select database();

删除数据库：drop database 数据库名;

truncate 是删除表数据，不删除表的结构，速度排第二，但不能与where一起使用
delete 是删除表中的数据，不删除表结构，速度最慢，但可以与where连用，可以删除指定的行
删除表名：drop table 表名；
2、创建用户:
创建用户：create user 'test'@'localhost' identified by '123456';

（注：单引号和双引号都可以，test为新建用户名，localhost为允许test用户访问的主机，
localhost表示只能在本机登录，%代表所有的电脑都可以登录，'123456'表示test用户的登录密码）

说明:

username - 你将创建的用户名,

host - 指定该用户在哪个主机上可以登陆,如果是本地用户可用localhost, 如果想让该用户可以从任意远程主机登陆,可以使用通配符%.

password - 该用户的登陆密码,密码可以为空,如果为空则该用户可以不需要密码登陆服务器.

登陆时,先把当前exit,再输入以下

mysql -h 127.0.0.1 -u linlin -p 密码

mysql -h 127.0.0.1 -u pig -p 密码

3、授权:
删除用户：drop user 'test'@'localhost'; (test为用户名，localhost为登录主机)
命令:GRANT privileges ON databasename.tablename TO 'username'@'host'
查看数据库中某个用户权限：show grants for 'test'@'localhost'; (查看test用户在本机的权限)
删除用户操作权限：revoke all on test.* from 'test'@'localhost';  

privileges - 用户的操作权限,如SELECT , INSERT , UPDATE 等

ALL.;databasename - 数据库名,tablename-表名,如果要授予该用户对所有数据库和表的相应操作权限则可用*表示, 如*.*.

注意:用以上命令授权的用户不能给其它用户授权,如果想让该用户可以授权,用以下命令:

GRANT privileges ON databasename.tablename TO 'username'@'host'WITH GRANT OPTION;

二、数据库与表显示、创建、删除

1、数据库显示、创建、删除

显示数据库： show databases;

创建库： create database 库名;

删除库： drop database 库名;

使用库(选中库)：

use 库名;

2、表显示、创建、删除

显示数据表：show tables; （要先用use 数据库名选定数据库）

显示表结构： describe 表名;或者desc 表名

创建表：
create table 表名 (字段设定列表);

删除表： drop table 表名;

三、表复制及备份还原

假设现在有表books：

1.复制表结构

1.1 含有主键等信息的完整表结构

CREATE table 新表名 LIKE book;

1.2 只有表结构，没有主键等信息

create table 新表名 select * from books;

或

create table新表名 as(select * from book);

或

create table 新表名 select * from books where1=2;

2.将旧表中的数据灌入新表

INSERT INTO 新表 SELECT * FROM 旧表；

注： 新表必须已经存在

3.输入创建表的DDL语句

show create table 表名;

4.清空表数据

truncate table 表名;

四、数据库表中数据操作

1、清除mysql表中数据

delete from 表名;

truncate table 表名;

不带where参数的delete语句可以删除mysql表中所有内容，使用truncate table也可以清空mysql表中所有内容。

效率上truncate比delete快，但truncate删除后不记录mysql日志，不可以恢复数据。

delete的效果有点像将mysql表中所有记录一条一条删除到删完，

而truncate相当于保留mysql表的结构，重新创建了这个表，所有的状态都相当于新表。

2、删除表中的某些数据

delete from命令格式：delete from 表名 where 表达式

例如，删除表 MyClass中编号为1 的记录：

代码如下:

mysql> delete from MyClass where id=1;
五、修改表的列与表名

1、给列更名

>alter table 表名称 change 字段名称 字段名称

例如：

alter table pet change weight wei;

2、给表更名

>alter table 表名称 rename 表名称

例如：

alter table tbl_name rename new_tbl

4、修改某个表的字段名称及指定为空或非空

>alter table 表名称 change 字段原名称字段新名称 字段类型 [是否允许非空];

例如:

修改表expert_info中的字段birth,允许其为空

代码如下:

>alter table expert_info change birth birth varchar(20) null;
六、修改表中的数据

1.增加一个字段(一列)

alter table table_name add column column_name type default value; type指该字段的类型,value指该字段的默认值

例如:

代码如下:

alter table mybook add column publish_house varchar(10) default ”;
2.更改一个字段名字(也可以改变类型和默认值)

alter table table_name change sorce_col_name dest_col_name type defaultvalue; source_col_name指原来的字段名称,dest_col_name

指改后的字段名称

例如:

代码如下:

alter table Board_Info change IsMobile IsTelphone int(3) unsigned default1;
3.改变一个字段的默认值

alter table table_name alter column_name set default value;

例如:

代码如下:

alter table book alter flag set default '0′;
4.改变一个字段的数据类型

alter table table_name change column column_name column_name type;

例如:

代码如下:

alter table userinfo change column username username varchar(20)
5.向一个表中增加一个列做为主键

alter table table_name add column column_name type auto_increment PRIMARYKEY;

例如:

代码如下:

alter table book add column id int(10) auto_increment PRIMARY KEY;
6.数据库某表的备份,在命令行中输入:

mysqldump -u root -p database_name table_name > bak_file_name

例如:

代码如下:

mysqldump -u root -p f_info user_info > user_info.dat
7.导出数据

select_statment into outfile”dest_file”;

例如:

代码如下:

select cooperatecode,createtime from publish limit 10 intooutfile”/home/mzc/temp/tempbad.txt”;
8.导入数据

load data infile”file_name” into table table_name;

例如:

代码如下:

load data infile”/home/mzc/temp/tempbad.txt” into table pad;
9.将两个表里的数据拼接后插入到另一个表里。下面的例子说明将t1表中的com2和t2表中的com1字段的值拼接后插入到tx表对应的字段里。

例如:

代码如下:

insert into tx select t1.com1,concat(t1.com2,t2.com1) from t1,t2;
10 . 删除字段

alter table form1 drop column 列名;

七、查询表

mysql查询的五种子句

where(条件查询)、having（筛选）、group by（分组）、order by（排序）、limit（限制结果数）

1、查询数值型数据:

SELECT * FROM tb_name WHERE sum > 100;

查询谓词:>,=,<,<>,!=,!>,!<,=>,=<

2、查询字符串

SELECT * FROM tb_stu WHERE sname = '小刘'

SELECT * FROM tb_stu WHERE sname like '刘%'

SELECT * FROM tb_stu WHERE sname like '%程序员'

SELECT * FROM tb_stu WHERE sname like '%PHP%'

3、查询日期型数据

SELECT * FROM tb_stu WHERE date = '2011-04-08'

注:不同数据库对日期型数据存在差异: ：

(1)MySQL:SELECT * from tb_name WHERE birthday = '2011-04-08'

(2)SQL Server:SELECT * from tb_name WHERE birthday = '2011-04-08'

(3)Access:SELECT * from tb_name WHERE birthday = #2011-04-08#

4、查询逻辑型数据

SELECT * FROM tb_name WHERE type = 'T'

SELECT * FROM tb_name WHERE type = 'F'

逻辑运算符: and or not

5、查询非空数据

SELECT * FROM tb_name WHERE address <>'' order by addtime desc

注:<>相当于PHP中的!=

6、利用变量查询数值型数据

SELECT * FROM tb_name WHERE id = '$_POST[text]'

注:利用变量查询数据时，传入SQL的变量不必用引号括起来，因为PHP中的字符串与数值型数据进行连接时，程序会自动将数值型数据转变成字符串，然后与要连接的字符串进行连接

7、利用变量查询字符串数据

SELECT * FROM tb_name WHERE name LIKE '%$_POST[name]%'

完全匹配的方法"%%"表示可以出现在任何位置

8、查询前n条记录

SELECT * FROM tb_name LIMIT 0,$N;

limit语句与其他语句，如order by等语句联合使用，会使用SQL语句千变万化，使程序非常灵活

9、查询后n条记录

SELECT * FROM tb_stu ORDER BY id ASC LIMIT $n

10、查询从指定位置开始的n条记录

SELECT * FROM tb_stu ORDER BY id ASC LIMIT 
P
O
S
T
[
b
e
g
i
n
]
,
POST[begin],n

注意:数据的id是从0开始的

11、查询统计结果中的前n条记录

SELECT * ,(yw+sx+wy) AS total FROM tb_score ORDER BY (yw+sx+wy) DESC LIMIT 0,$num

14、查询大于指定条件的记录

SELECT * FROM tb_stu WHERE age>$_POST[age] ORDER BY age;

15、查询结果不显示重复记录

SELECT DISTINCT 字段名 FROM 表名 WHERE 查询条件

注: SQL语句中的DISTINCT必须与WHERE子句联合使用，否则输出的信息不会有变化 ,且字段不能用*代替

16、NOT与谓词进行组合条件的查询

(1)NOT BERWEEN … AND … 对介于起始值和终止值间的数据时行查询 可改成 <起始值 AND >终止值

(2)IS NOT NULL 对非空值进行查询

(3)IS NULL 对空值进行查询

(4)NOT IN 该式根据使用的关键字是包含在列表内还是排除在列表外，指定表达式的搜索，搜索表达式可以是常量或列名，而列名可以是一组常量，但更多情况下是子查询

17、显示数据表中重复的记录和记录条数

SELECT name,age,count(*) ,age FROM tb_stu WHERE age = '19' group by date

18、对数据进行降序/升序查询

SELECT 字段名 FROM tb_stu WHERE 条件 ORDER BY 字段 DESC 降序

SELECT 字段名 FROM tb_stu WHERE 条件 ORDER BY 字段 ASC 升序

注:对字段进行排序时若不指定排序方式，则默认为ASC升序

19、对数据进行多条件查询

SELECT 字段名 FROM tb_stu WHERE 条件 ORDER BY 字段1 ASC 字段2 DESC …

注意: 对查询信息进行多条件排序是为了共同限制记录的输出，一般情况下，由于不是单一条件限制，所以在输出效果上有一些差别。

20、对统计结果进行排序

函数SUM([ALL]字段名) 或 SUM([DISTINCT]字段名),可实现对字段的求和，函数中为ALL时为所有该字段所有记录求和,若为DISTINCT则为该字段所有不重复记录的字段求和

如： SELECT name,SUM(price) AS sumprice FROM tb_price GROUP BY name

SELECT * FROM tb_name ORDER BY mount DESC,price ASC

21、单列数据分组统计

SELECT id,name,SUM(price) AS title,date FROM tb_price GROUP BY pid ORDER BY title DESC

注: 当分组语句group by排序语句order by同时出现在SQL语句中时，要将分组语句书写在排序语句的前面，否则会出现错误

22、多列数据分组统计

多列数据分组统计与单列数据分组统计类似

SELECT *，SUM(字段1*字段2) AS (新字段1) FROM 表名 GROUP BY 字段 ORDER BY 新字段1 DESC

SELECT id,name,SUM(price*num) AS sumprice FROM tb_price GROUP BY pid ORDER BY sumprice DESC

注： group by语句后面一般为不是聚合函数的数列，即不是要分组的列